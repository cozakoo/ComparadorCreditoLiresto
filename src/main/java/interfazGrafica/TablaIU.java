/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfazGrafica;

import com.mycompany.ministerio.comparacion.DataBase;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dgc06
 */
public class TablaIU extends javax.swing.JFrame {

    /**
     * Creates new form TablaIU
     *
     * @throws java.sql.SQLException
     */
    //boleean components filter
    boolean incisoState, principalState, parcialSate, SubparcialState, congastosState,
            negativoState, partida151State, agrupFFSstate, sinPartState = false;

    DataBase db;
    DefaultTableModel model;

    public TablaIU(DataBase db) throws SQLException {
        this.db = db;
        initComponents();
    }

    private DefaultTableModel crearModel(ResultSet rs) throws SQLException {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Todas las celdas son no editables
                return false;
            }
        };

        boolean columnasNoCargadas = true;
        String resultadoSQL = "";
        int numColumnas = rs.getMetaData().getColumnCount();

//        int[] saldos = {numColumnas, numColumnas - 1, numColumnas - 2};
//        int columnaSaldo = numColumnas;
//        int columnaLiberamiento = numColumnas - 1;
//        int columnaCredito = numColumnas - 2;
        // Obtenemos el t√≠tulo de las columnas
        for (int i = 1; i <= numColumnas; i++) {
            String columnName = rs.getMetaData().getColumnName(i);
            model.addColumn(columnName);
        }

        // Procesamos los datos de las filas
        while (rs.next()) {
            Object[] row = new Object[numColumnas];
            for (int i = 1; i <= numColumnas; i++) {
                Object obj = rs.getObject(i);
                if (obj != null) {
                    if (obj instanceof Double) {
                        DecimalFormat formatea = new DecimalFormat("###,##0.00");
                        row[i - 1] = formatea.format(obj);
                    } else {
                        if (obj instanceof String) {
                            row[i - 1] = obj;
                        } else {

                            row[i - 1] = obj;
                        }
                    }
                }
            }
            model.addRow(row);
        }

        return model;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.ButtonGroup buttonGroup1 = new javax.swing.ButtonGroup();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        incisoCheck = new javax.swing.JCheckBox();
        principalCheck = new javax.swing.JCheckBox();
        parcialCheck = new javax.swing.JCheckBox();
        subParcialCheck = new javax.swing.JCheckBox();
        javax.swing.JButton filtrarBtn = new javax.swing.JButton();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        DesdeTextField = new javax.swing.JTextField();
        HastaTextField = new javax.swing.JTextField();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        agruparFFCheck = new javax.swing.JCheckBox();
        sinPartidaCheck = new javax.swing.JCheckBox();
        conGastosCheck = new javax.swing.JCheckBox();
        NegativoCheck = new javax.swing.JCheckBox();
        Partida151Check = new javax.swing.JCheckBox();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        exportarBtn = new javax.swing.JButton();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        fuenteTextField = new javax.swing.JTextField();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setForeground(new java.awt.Color(51, 51, 51));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setEditingColumn(0);
        jTable1.setEditingRow(0);
        jScrollPane1.setViewportView(jTable1);

        incisoCheck.setBackground(new java.awt.Color(255, 255, 255));
        incisoCheck.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        incisoCheck.setForeground(new java.awt.Color(51, 51, 51));
        incisoCheck.setText("Inciso");
        incisoCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incisoCheckActionPerformed(evt);
            }
        });

        principalCheck.setBackground(new java.awt.Color(255, 255, 255));
        principalCheck.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        principalCheck.setForeground(new java.awt.Color(51, 51, 51));
        principalCheck.setText("Principal");
        principalCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principalCheckActionPerformed(evt);
            }
        });

        parcialCheck.setBackground(new java.awt.Color(255, 255, 255));
        parcialCheck.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        parcialCheck.setForeground(new java.awt.Color(51, 51, 51));
        parcialCheck.setText("Parcial");
        parcialCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parcialCheckActionPerformed(evt);
            }
        });

        subParcialCheck.setBackground(new java.awt.Color(255, 255, 255));
        subParcialCheck.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        subParcialCheck.setForeground(new java.awt.Color(51, 51, 51));
        subParcialCheck.setText("Sub parcial");
        subParcialCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subParcialCheckActionPerformed(evt);
            }
        });

        filtrarBtn.setBackground(new java.awt.Color(0, 102, 204));
        filtrarBtn.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        filtrarBtn.setForeground(new java.awt.Color(255, 255, 255));
        filtrarBtn.setText("Filtrar");
        filtrarBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        filtrarBtn.setBorderPainted(false);
        filtrarBtn.setFocusable(false);
        filtrarBtn.setRequestFocusEnabled(false);
        filtrarBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filtrarBtnMouseClicked(evt);
            }
        });
        filtrarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrarBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("NIVEL PARTIDA");

        jLabel2.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("ESTADO");

        jLabel3.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("LIMITATIVA");

        DesdeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DesdeTextFieldActionPerformed(evt);
            }
        });
        DesdeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DesdeTextFieldKeyTyped(evt);
            }
        });

        HastaTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HastaTextFieldKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Fuente");

        agruparFFCheck.setBackground(new java.awt.Color(255, 255, 255));
        agruparFFCheck.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        agruparFFCheck.setForeground(new java.awt.Color(51, 51, 51));
        agruparFFCheck.setText("Agrupar");
        agruparFFCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agruparFFCheckActionPerformed(evt);
            }
        });

        sinPartidaCheck.setBackground(new java.awt.Color(255, 255, 255));
        sinPartidaCheck.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        sinPartidaCheck.setForeground(new java.awt.Color(51, 51, 51));
        sinPartidaCheck.setText("Sin partida");
        sinPartidaCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinPartidaCheckActionPerformed(evt);
            }
        });

        conGastosCheck.setBackground(new java.awt.Color(255, 255, 255));
        conGastosCheck.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        conGastosCheck.setForeground(new java.awt.Color(51, 51, 51));
        conGastosCheck.setText("Con gastos");
        conGastosCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conGastosCheckActionPerformed(evt);
            }
        });

        NegativoCheck.setBackground(new java.awt.Color(255, 255, 255));
        NegativoCheck.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        NegativoCheck.setForeground(new java.awt.Color(51, 51, 51));
        NegativoCheck.setText("Negativo");
        NegativoCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativoCheckActionPerformed(evt);
            }
        });

        Partida151Check.setBackground(new java.awt.Color(255, 255, 255));
        Partida151Check.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        Partida151Check.setForeground(new java.awt.Color(51, 51, 51));
        Partida151Check.setText("Partida 151");
        Partida151Check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Partida151CheckActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("fin funcion");

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("N¬∞");

        jLabel7.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Desde");

        exportarBtn.setBackground(new java.awt.Color(0, 102, 204));
        exportarBtn.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        exportarBtn.setForeground(new java.awt.Color(255, 255, 255));
        exportarBtn.setText("Exportar");
        exportarBtn.setToolTipText("");
        exportarBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        exportarBtn.setBorderPainted(false);
        exportarBtn.setEnabled(false);
        exportarBtn.setFocusPainted(false);
        exportarBtn.setFocusable(false);
        exportarBtn.setRequestFocusEnabled(false);
        exportarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarBtnActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 102, 204));
        jLabel8.setText("ANALISIS DE CREDITOS");

        jLabel9.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("SAF");

        fuenteTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fuenteTextFieldKeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("Hasta");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(450, 450, 450)
                .addComponent(jLabel8))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(incisoCheck)
                    .addComponent(principalCheck)
                    .addComponent(parcialCheck)
                    .addComponent(subParcialCheck)
                    .addComponent(jLabel9)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(7, 7, 7)
                        .addComponent(DesdeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(7, 7, 7)
                        .addComponent(HastaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(27, 27, 27)
                        .addComponent(fuenteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addComponent(NegativoCheck)
                    .addComponent(conGastosCheck)
                    .addComponent(sinPartidaCheck)
                    .addComponent(Partida151Check)
                    .addComponent(agruparFFCheck)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(filtrarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 810, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(510, 510, 510)
                .addComponent(exportarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel8)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel3)))
                        .addGap(12, 12, 12)
                        .addComponent(incisoCheck)
                        .addGap(1, 1, 1)
                        .addComponent(principalCheck)
                        .addGap(1, 1, 1)
                        .addComponent(parcialCheck)
                        .addGap(1, 1, 1)
                        .addComponent(subParcialCheck)
                        .addGap(21, 21, 21)
                        .addComponent(jLabel9)
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(DesdeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(HastaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addComponent(jLabel4)
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel6))
                            .addComponent(fuenteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2)
                        .addGap(15, 15, 15)
                        .addComponent(NegativoCheck)
                        .addGap(1, 1, 1)
                        .addComponent(conGastosCheck)
                        .addGap(1, 1, 1)
                        .addComponent(sinPartidaCheck)
                        .addGap(1, 1, 1)
                        .addComponent(Partida151Check)
                        .addGap(1, 1, 1)
                        .addComponent(agruparFFCheck)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel5)
                        .addGap(28, 28, 28)
                        .addComponent(filtrarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(21, 21, 21)
                .addComponent(exportarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(26, 26, 26))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void filtrarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrarBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filtrarBtnActionPerformed

    private void incisoCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incisoCheckActionPerformed
        // TODO add your handling code here:
        if (incisoCheck.isSelected()) {
            parcialCheck.setEnabled(false);
            principalCheck.setEnabled(false);
            subParcialCheck.setEnabled(false);
        } else {
            if ((!parcialCheck.isSelected()) && (!principalCheck.isSelected()) && (!subParcialCheck.isSelected())) {
                exportarBtn.setEnabled(false);
            }
            parcialCheck.setEnabled(true);
            principalCheck.setEnabled(true);
            subParcialCheck.setEnabled(true);
        }

    }//GEN-LAST:event_incisoCheckActionPerformed

    private void parcialCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parcialCheckActionPerformed
        if (parcialCheck.isSelected()) {
            incisoCheck.setEnabled(false);
            principalCheck.setEnabled(false);
            subParcialCheck.setEnabled(false);
        } else {
            if ((!incisoCheck.isSelected()) && (!principalCheck.isSelected()) && (!subParcialCheck.isSelected())) {
                exportarBtn.setEnabled(false);
            }
            incisoCheck.setEnabled(true);
            principalCheck.setEnabled(true);
            subParcialCheck.setEnabled(true);

        }

    }//GEN-LAST:event_parcialCheckActionPerformed

    private void principalCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_principalCheckActionPerformed
        // TODO add your handling code here:
        if (principalCheck.isSelected()) {
            incisoCheck.setEnabled(false);
            parcialCheck.setEnabled(false);
            subParcialCheck.setEnabled(false);
        } else {
            if ((!parcialCheck.isSelected()) && (!incisoCheck.isSelected()) && (!subParcialCheck.isSelected())) {
                exportarBtn.setEnabled(false);
            }
            incisoCheck.setEnabled(true);
            parcialCheck.setEnabled(true);
            subParcialCheck.setEnabled(true);
        }

    }//GEN-LAST:event_principalCheckActionPerformed

    private void sinPartidaCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinPartidaCheckActionPerformed
        // TODO add your handling code here:
        if (sinPartidaCheck.isSelected()) {
            Partida151Check.setEnabled(false);
            agruparFFCheck.setEnabled(false);
            agruparFFCheck.setEnabled(false);
            conGastosCheck.setEnabled(false);
            NegativoCheck.setEnabled(false);

            //deshabilita niveles y selecciona el subparcial
            incisoCheck.setSelected(false);
            incisoCheck.setEnabled(false);
            principalCheck.setSelected(false);
            principalCheck.setEnabled(false);
            parcialCheck.setSelected(false);
            parcialCheck.setEnabled(false);
            subParcialCheck.setSelected(true);
            subParcialCheck.setEnabled(false);
        } else {

            Partida151Check.setEnabled(true);
            agruparFFCheck.setEnabled(true);
            agruparFFCheck.setEnabled(true);
            conGastosCheck.setEnabled(true);
            NegativoCheck.setEnabled(true);
            subParcialCheck.setSelected(false);
            incisoCheck.setEnabled(true);
            principalCheck.setEnabled(true);
            parcialCheck.setEnabled(true);
            subParcialCheck.setEnabled(true);
        }
    }//GEN-LAST:event_sinPartidaCheckActionPerformed

    private void conGastosCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conGastosCheckActionPerformed
        // TODO add your handling code here:
        if (conGastosCheck.isSelected()) {
            sinPartidaCheck.setEnabled(false);
            Partida151Check.setEnabled(false);
            agruparFFCheck.setEnabled(false);
        } else {
            sinPartidaCheck.setEnabled(true);
            Partida151Check.setEnabled(true);
            agruparFFCheck.setEnabled(true);
        }
    }//GEN-LAST:event_conGastosCheckActionPerformed

    private void NegativoCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativoCheckActionPerformed
        // TODO add your handling code here:
        if (NegativoCheck.isSelected()) {
            sinPartidaCheck.setEnabled(false);
            Partida151Check.setEnabled(false);
            agruparFFCheck.setEnabled(false);
        } else {
            sinPartidaCheck.setEnabled(true);
            Partida151Check.setEnabled(true);
            agruparFFCheck.setEnabled(true);
        }
    }//GEN-LAST:event_NegativoCheckActionPerformed

    private void filtrarBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filtrarBtnMouseClicked
        String sql = "";
        String atributoSql = "";
        Statement stmt = null;
        String fuente;

        if (!fuenteTextField.getText().isEmpty()) {
            fuente = "c.fuente = " + fuenteTextField.getText();
        } else {
            fuente = "c.fuente >= 0";
        }

        if (!DesdeTextField.getText().isEmpty() && !HastaTextField.getText().isEmpty()) {
            int desde = Integer.parseInt(DesdeTextField.getText());
            int hasta = Integer.parseInt(HastaTextField.getText());
            atributoSql = " c.saf >= " + desde + " AND c.saf <= " + hasta + " AND " + fuente;
        } else {
            atributoSql = " c.saf >= 0 " + " AND " + fuente;
        }

        if (incisoCheck.isSelected()) {
            sql = "SELECT c.saf, c.programa, c.subPrograma, c.proyecto,\n"
                    + "       c.actividad, c.obra, c.fuente, c.inciso,\n"
                    + "       SUM(c.credito_disponible) AS Credito_disponible,\n"
                    + "       SUM(COALESCE(j.importe, 0)) AS libramiento,\n"
                    + "       SUM(c.credito_disponible) - SUM(COALESCE(j.importe, 0)) AS saldo\n"
                    + "FROM credito c\n"
                    + "LEFT JOIN (\n"
                    + "    SELECT e.saf, programa, subPrograma, proyecto, actividad, obra,\n"
                    + "           fuente, inciso, principal, parcial, subParcial, sum(importe) AS importe\n"
                    + "    FROM liresto l\n"
                    + "    LEFT JOIN empresa e ON l.clave_saf = e.clave_saf\n"
                    + "	group by saf, programa, subPrograma, proyecto, actividad, obra,\n"
                    + "           fuente, inciso, principal, parcial, subParcial\n"
                    + ") j ON c.saf = j.saf\n"
                    + "    AND c.programa = j.programa\n"
                    + "    AND c.subPrograma = j.subPrograma\n"
                    + "    AND c.proyecto = j.proyecto\n"
                    + "    AND c.actividad = j.actividad\n"
                    + "    AND c.obra = j.obra\n"
                    + "    AND c.fuente = j.fuente\n"
                    + "    AND c.inciso = j.inciso\n"
                    + "    AND c.principal = j.principal\n"
                    + "    AND c.parcial = j.parcial\n"
                    + "    AND c.subParcial = j.subParcial\n"
                    + "WHERE " + " " + atributoSql + " " + " "
                    + "GROUP BY c.saf, c.programa, c.subPrograma, c.proyecto,\n"
                    + "         c.actividad, c.obra, c.fuente, c.inciso \n"
                    + "HAVING SUM(c.credito_disponible) - SUM(COALESCE(j.importe, 0))";
        }

        if (principalCheck.isSelected()) {
            sql = "SELECT c.saf, c.programa, c.subPrograma, c.proyecto,\n"
                    + "       c.actividad, c.obra, c.fuente, c.inciso, c.principal,\n"
                    + "       SUM(c.credito_disponible) AS Credito_disponible,\n"
                    + "       SUM(COALESCE(j.importe, 0)) AS libramiento,\n"
                    + "       SUM(c.credito_disponible) - SUM(COALESCE(j.importe, 0)) AS saldo\n"
                    + "FROM credito c\n"
                    + "LEFT JOIN (\n"
                    + "    SELECT e.saf, programa, subPrograma, proyecto, actividad, obra,\n"
                    + "           fuente, inciso, principal, parcial, subParcial, sum(importe) AS importe\n"
                    + "    FROM liresto l\n"
                    + "    LEFT JOIN empresa e ON l.clave_saf = e.clave_saf\n"
                    + "	group by saf, programa, subPrograma, proyecto, actividad, obra,\n"
                    + "           fuente, inciso, principal, parcial, subParcial\n"
                    + ") j ON c.saf = j.saf\n"
                    + "    AND c.programa = j.programa\n"
                    + "    AND c.subPrograma = j.subPrograma\n"
                    + "    AND c.proyecto = j.proyecto\n"
                    + "    AND c.actividad = j.actividad\n"
                    + "    AND c.obra = j.obra\n"
                    + "    AND c.fuente = j.fuente\n"
                    + "    AND c.inciso = j.inciso\n"
                    + "    AND c.principal = j.principal\n"
                    + "    AND c.parcial = j.parcial\n"
                    + "    AND c.subParcial = j.subParcial\n"
                    + "WHERE " + " " + atributoSql + " " + " "
                    + "GROUP BY c.saf, c.programa, c.subPrograma, c.proyecto,\n"
                    + "         c.actividad, c.obra, c.fuente, c.inciso, c.principal \n"
                    + "HAVING SUM(c.credito_disponible) - SUM(COALESCE(j.importe, 0))";
        }

        if (parcialCheck.isSelected()) {
            sql = "SELECT c.saf, c.programa, c.subPrograma, c.proyecto,\n"
                    + "       c.actividad, c.obra, c.fuente, c.inciso, c.principal, c.parcial,\n"
                    + "       SUM(c.credito_disponible) AS Credito_disponible,\n"
                    + "       SUM(COALESCE(j.importe, 0)) AS libramiento,\n"
                    + "       SUM(c.credito_disponible) - SUM(COALESCE(j.importe, 0)) AS saldo\n"
                    + "FROM credito c\n"
                    + "LEFT JOIN (\n"
                    + "    SELECT e.saf, programa, subPrograma, proyecto, actividad, obra,\n"
                    + "           fuente, inciso, principal, parcial, subParcial, sum(importe) AS importe\n"
                    + "    FROM liresto l\n"
                    + "    LEFT JOIN empresa e ON l.clave_saf = e.clave_saf\n"
                    + "	group by saf, programa, subPrograma, proyecto, actividad, obra,\n"
                    + "           fuente, inciso, principal, parcial, subParcial\n"
                    + ") j ON c.saf = j.saf\n"
                    + "    AND c.programa = j.programa\n"
                    + "    AND c.subPrograma = j.subPrograma\n"
                    + "    AND c.proyecto = j.proyecto\n"
                    + "    AND c.actividad = j.actividad\n"
                    + "    AND c.obra = j.obra\n"
                    + "    AND c.fuente = j.fuente\n"
                    + "    AND c.inciso = j.inciso\n"
                    + "    AND c.principal = j.principal\n"
                    + "    AND c.parcial = j.parcial\n"
                    + "    AND c.subParcial = j.subParcial\n"
                    + "WHERE " + " " + atributoSql + " " + " "
                    + "GROUP BY c.saf, c.programa, c.subPrograma, c.proyecto,\n"
                    + "         c.actividad, c.obra, c.fuente, c.inciso, c.principal, c.parcial \n"
                    + "HAVING SUM(c.credito_disponible) - SUM(COALESCE(j.importe, 0))";
        }

        if (subParcialCheck.isSelected()) {
            sql = "SELECT c.saf, c.programa, c.subPrograma, c.proyecto,\n"
                    + "       c.actividad, c.obra, c.fuente, c.inciso, c.principal, c.parcial, c.subParcial,\n"
                    + "       SUM(c.credito_disponible) AS Credito_disponible,\n"
                    + "       SUM(COALESCE(j.importe, 0)) AS libramiento,\n"
                    + "       SUM(c.credito_disponible) - SUM(COALESCE(j.importe, 0)) AS saldo\n"
                    + "FROM credito c\n"
                    + "LEFT JOIN (\n"
                    + "    SELECT e.saf, programa, subPrograma, proyecto, actividad, obra,\n"
                    + "           fuente, inciso, principal, parcial, subParcial, sum(importe) AS importe\n"
                    + "    FROM liresto l\n"
                    + "    LEFT JOIN empresa e ON l.clave_saf = e.clave_saf\n"
                    + "	group by saf, programa, subPrograma, proyecto, actividad, obra,\n"
                    + "           fuente, inciso, principal, parcial, subParcial\n"
                    + ") j ON c.saf = j.saf\n"
                    + "    AND c.programa = j.programa\n"
                    + "    AND c.subPrograma = j.subPrograma\n"
                    + "    AND c.proyecto = j.proyecto\n"
                    + "    AND c.actividad = j.actividad\n"
                    + "    AND c.obra = j.obra\n"
                    + "    AND c.fuente = j.fuente\n"
                    + "    AND c.inciso = j.inciso\n"
                    + "    AND c.principal = j.principal\n"
                    + "    AND c.parcial = j.parcial\n"
                    + "    AND c.subParcial = j.subParcial\n"
                    + "WHERE " + " " + atributoSql + " " + " "
                    + "GROUP BY c.saf, c.programa, c.subPrograma, c.proyecto,\n"
                    + "         c.actividad, c.obra, c.fuente, c.inciso, c.principal, c.parcial, c.subParcial \n"
                    + "HAVING SUM(c.credito_disponible) - SUM(COALESCE(j.importe, 0))";
        }

        if (NegativoCheck.isSelected() && !conGastosCheck.isSelected()) {
            sql = "SELECT * FROM (" + sql + ")l WHERE l.saldo < 0";
        }

        if (conGastosCheck.isSelected() && !NegativoCheck.isSelected()) {
            sql = "SELECT * FROM (" + sql + ")l WHERE l.libramiento > 0";
        }

        if (conGastosCheck.isSelected() && NegativoCheck.isSelected()) {
            sql = "SELECT * FROM (" + sql + ")l WHERE l.libramiento > 0 AND l.saldo < 0";
        }

        if (sinPartidaCheck.isSelected()) {
            sql = "SELECT e.saf,l.programa,l.subPrograma,l.proyecto,l.actividad,l.obra\n"
                    + ",l.fuente,l.inciso,l.principal,l.parcial,l.subParcial, l.importe libramiento, c.credito_disponible\n"
                    + "FROM liresto l\n"
                    + "LEFT JOIN empresa e\n"
                    + "on l.clave_saf = e.clave_saf \n"
                    + "LEFT JOIN credito c \n"
                    + "on e.saf = c.saf AND l.programa = c.programa\n"
                    + "AND l.subPrograma =c.subPrograma AND l.proyecto = c.proyecto\n"
                    + "   AND c.actividad = l.actividad AND c.obra = l.obra \n"
                    + "   AND c.fuente = l.fuente AND c.inciso = l.inciso\n"
                    + "   AND c.principal = l.principal AND c.parcial = l.parcial\n"
                    + "   AND c.subParcial = l.subParcial\n"
                    + "\n"
                    + "WHERE c.credito_disponible IS NULL";
        }

        if (Partida151Check.isSelected()) {
            sql = "SELECT * FROM (SELECT c.saf, c.programa,c.subPrograma,c.proyecto,\n"
                    + "c.actividad,c.obra,c.fuente,c.inciso,c.principal,c.parcial,c.subParcial, c.credito_disponible , (coalesce(j.importe,0)) libramiento,\n"
                    + "(c.credito_disponible)-(coalesce(j.importe, 0)) saldo\n"
                    + "FROM credito c\n"
                    + "LEFT JOIN\n"
                    + "(SELECT e.saf, programa,subPrograma,proyecto,actividad,obra\n"
                    + ",fuente,inciso,principal,parcial,subParcial, importe\n"
                    + "FROM liresto l\n"
                    + "LEFT JOIN empresa e\n"
                    + "on l.clave_saf = e.clave_saf"
                    + "	group by saf, programa, subPrograma, proyecto, actividad, obra,\n"
                    + "           fuente, inciso, principal, parcial, subParcial\n"
                    + ") j\n"
                    + "on c.saf = j.saf AND c.programa = j.programa\n"
                    + "   AND c.subPrograma = j.subPrograma AND c.proyecto = j.proyecto\n"
                    + "   AND c.actividad = j.actividad AND c.obra = j.obra \n"
                    + "   AND c.fuente = j.fuente AND c.inciso = j.inciso\n"
                    + "   AND c.principal = j.principal AND c.parcial = j.parcial\n"
                    + "   AND c.subParcial = j.subParcial\n"
                    + "\n"
                    + "WHERE c.saf >= 1 AND c.inciso = 1 AND c.principal = 5 AND c.parcial = 1 AND c.subParcial = 1\n"
                    + "GROUP BY c.saf, c.programa,c.subPrograma,c.proyecto,\n"
                    + "c.actividad,c.obra,c.fuente,c.inciso,c.principal,c.parcial,c.subParcial\n"
                    + "HAVING\n"
                    + "(c.credito_disponible)-(coalesce(j.importe, 0)))m WHERE m.libramiento > 0 ;";
            System.out.println(sql);
        }

        if (agruparFFCheck.isSelected()) {
            sql = "SELECT r.saf, r.fuente, r.programa,\n"
                    + "r.finalidad_y_funcion,\n"
                    + "sum(r.credito_disponible) disponible,\n"
                    + "sum(r.importe_l) libramiento, \n"
                    + "sum(r.credito_disponible)-sum(r.importe_l)saldo\n"
                    + "FROM\n"
                    + "(select distinct                                                \n"
                    + "c.saf,c.fuente ,c.programa ,\n"
                    + "c.finalidad_y_funcion ,c.inciso ,\n"
                    + "c.principal ,c.parcial ,c.subParcial  \n"
                    + ",c.credito_disponible, COALESCE (j.importe,0) importe_l \n"
                    + "from credito c\n"
                    + "left join \n"
                    + "(\n"
                    + "SELECT e.saf, programa,subPrograma,\n"
                    + "proyecto,actividad,obra,importe\n"
                    + ",fuente,inciso,principal,parcial,subParcial, importe\n"
                    + "FROM liresto l\n"
                    + "LEFT JOIN empresa e\n"
                    + "on l.clave_saf = e.clave_saf\n"
                    + "	group by saf, programa, subPrograma, proyecto, actividad, obra,\n"
                    + "           fuente, inciso, principal, parcial, subParcial\n"
                    + ")j \n"
                    + "on \n"
                    + "c.saf = j.saf AND c.programa = j.programa\n"
                    + "AND c.subPrograma = j.subPrograma\n"
                    + "AND c.proyecto = j.proyecto\n"
                    + "AND c.actividad = j.actividad \n"
                    + "AND c.obra = j.obra \n"
                    + "AND c.fuente = j.fuente\n"
                    + "AND c.inciso = j.inciso\n"
                    + "AND c.principal = j.principal\n"
                    + "AND c.parcial = j.parcial\n"
                    + "AND c.subParcial = j.subParcial\n"
                    + "WHERE c.saf > 0) r\n"
                    + "GROUP BY \n"
                    + "r.saf, r.fuente, r.programa,\n"
                    + "r.finalidad_y_funcion\n"
                    + "HAVING \n"
                    + "sum(r.credito_disponible) - sum(r.importe_l)\n"
                    + "ORDER BY \n"
                    + "r.saf,r.fuente,r.programa,\n"
                    + "r.finalidad_y_funcion";
            if (conGastosCheck.isSelected() && !NegativoCheck.isSelected()) {
                sql = "SELECT * FROM (" + sql + ")s WHERE s.libramiento > 0";
            }
            if (!conGastosCheck.isSelected() && NegativoCheck.isSelected()) {
                sql = "SELECT * FROM (" + sql + ")s WHERE s.saldo < 0";
            }
            if (conGastosCheck.isSelected() && NegativoCheck.isSelected()) {
                sql = "SELECT * FROM (" + sql + ")s WHERE s.libramiento > 0 AND s.saldo < 0";
            }
        }

        if (!"".equals(sql)) {

            try {
                jTable1.setModel(crearModel(db.consulta(sql)));
                //habiltia boton exportar
                exportarBtn.setEnabled(true);
                redimensionar();
                /*jTable1.getColumnModel().getColumn(8).setPreferredWidth(100);
                jTable1.getColumnModel().getColumn(9).setPreferredWidth(100);
                jTable1.getColumnModel().getColumn(10).setPreferredWidth(100);
                 */
            } catch (SQLException ex) {
                Logger.getLogger(TablaIU.class.getName()).log(Level.SEVERE, null, ex);

            } catch (java.lang.NullPointerException ex) {
                new Notificacion("Seleccione nivel").setVisible(true);
            }


    }//GEN-LAST:event_filtrarBtnMouseClicked

    }

    private void redimensionar() {
        int maxColum;

        // Crear un renderizador de celdas personalizado para alinear a la derecha en la segunda columna
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);

        if (incisoCheck.isSelected()) {
            maxColum = 10;

            int i = 0;
            while (i <= maxColum) {
                if (i >= 8) {
                    jTable1.getColumnModel().getColumn(i).setPreferredWidth(100);
                    jTable1.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
                } else {
                    jTable1.getColumnModel().getColumn(i).setPreferredWidth(30);
                    jTable1.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
                }
                i++;
            }

        }

        if (principalCheck.isSelected()) {
            maxColum = 11;

            int i = 0;
            while (i <= maxColum) {
                if (i >= 9) {
                    jTable1.getColumnModel().getColumn(i).setPreferredWidth(100);
                    jTable1.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
                } else {
                    jTable1.getColumnModel().getColumn(i).setPreferredWidth(30);
                    jTable1.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
                }
                i++;
            }
        }

        if (parcialCheck.isSelected()) {
            maxColum = 12;

            int i = 0;
            while (i <= maxColum) {
                if (i >= 10) {
                    jTable1.getColumnModel().getColumn(i).setPreferredWidth(100);
                    jTable1.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
                } else {
                    jTable1.getColumnModel().getColumn(i).setPreferredWidth(30);
                    jTable1.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
                }
                i++;
            }
        }

        if (subParcialCheck.isSelected() | Partida151Check.isSelected() | sinPartidaCheck.isSelected()) {
            maxColum = 13;

            int i = 0;
            while (i <= maxColum) {
                if (i >= 11) {
                    jTable1.getColumnModel().getColumn(i).setPreferredWidth(100);
                    jTable1.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
                } else {
                    jTable1.getColumnModel().getColumn(i).setPreferredWidth(30);
                    jTable1.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
                }
                i++;
            }
        }

    }


    private void DesdeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DesdeTextFieldActionPerformed

    }//GEN-LAST:event_DesdeTextFieldActionPerformed

    private void DesdeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DesdeTextFieldKeyTyped
        // TODO add your handling code here:
        char teclaPulsada = evt.getKeyChar(); // Recogemos, a partir del evento, la tecla que se puls√≥

        if (!Character.isDigit(teclaPulsada)) { // Si la tecla pulsada no es un d√≠gito, entonces...
            evt.consume(); // Borramos la √∫ltima letra introducida (lo hace muy r√°pido, la
            // letra nunca se escribe en el textfield)
        }
    }//GEN-LAST:event_DesdeTextFieldKeyTyped

    private void Partida151CheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Partida151CheckActionPerformed
        // TODO add your handling code here:
        if (Partida151Check.isSelected()) {
            sinPartidaCheck.setEnabled(false);
            NegativoCheck.setEnabled(false);
            agruparFFCheck.setEnabled(false);
            conGastosCheck.setEnabled(false);

            //deshabilita niveles y selecciona el subparcial
            incisoCheck.setSelected(false);
            incisoCheck.setEnabled(false);
            principalCheck.setSelected(false);
            principalCheck.setEnabled(false);
            parcialCheck.setSelected(false);
            parcialCheck.setEnabled(false);
            subParcialCheck.setSelected(true);
            subParcialCheck.setEnabled(false);

        } else {
            sinPartidaCheck.setEnabled(true);
            NegativoCheck.setEnabled(true);
            agruparFFCheck.setEnabled(true);
            conGastosCheck.setEnabled(true);

            //habilita los niveles y selecciona el subparcial
            subParcialCheck.setSelected(false);
            incisoCheck.setEnabled(true);
            principalCheck.setEnabled(true);
            parcialCheck.setEnabled(true);
            subParcialCheck.setEnabled(true);

        }
    }//GEN-LAST:event_Partida151CheckActionPerformed

    private void agruparFFCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agruparFFCheckActionPerformed
        // TODO add your handling code here:
        if (agruparFFCheck.isSelected()) {
            sinPartidaCheck.setEnabled(false);
            Partida151Check.setEnabled(false);
            incisoCheck.setEnabled(false);
            parcialCheck.setEnabled(false);
            subParcialCheck.setEnabled(false);
            principalCheck.setEnabled(false);
        } else {
            sinPartidaCheck.setEnabled(true);
            Partida151Check.setEnabled(true);
            incisoCheck.setEnabled(true);
            parcialCheck.setEnabled(true);
            subParcialCheck.setEnabled(true);
            principalCheck.setEnabled(true);
        }
    }//GEN-LAST:event_agruparFFCheckActionPerformed

    private void exportarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarBtnActionPerformed
        String entrada = null;
        JFileChooser ventana = new JFileChooser(entrada);
        ventana.setDialogTitle("Guardar");
        ventana.setFileFilter(new FileNameExtensionFilter("Archivos de Excel", "xls", "xlsx"));

        if (ventana.showDialog(null, "Guardar") == JFileChooser.APPROVE_OPTION) {
            File archivo = ventana.getSelectedFile();
            try {
                int nivel;

                if (agruparFFCheck.isSelected()) {
                    nivel = 6;
                } else {

                    if (sinPartidaCheck.isSelected()) {
                        nivel = 5;
                    } else {
                        if ((Partida151Check.isSelected()) || (subParcialCheck.isSelected())) {
                            nivel = 4;
                        } else {
                            if (parcialCheck.isSelected()) {
                                nivel = 3;
                            } else {
                                if (principalCheck.isSelected()) {
                                    nivel = 2;
                                } else {
                                    nivel = 1;
                                }
                            }
                        }
                    }
                }
                this.db.exportarExcel(archivo, nivel);
                exportarBtn.setEnabled(false);
            } catch (Exception ex) {
                Logger.getLogger(TablaIU.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_exportarBtnActionPerformed

    private void subParcialCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subParcialCheckActionPerformed
        if (subParcialCheck.isSelected()) {
            incisoCheck.setEnabled(false);
            principalCheck.setEnabled(false);
            parcialCheck.setEnabled(false);
        } else {
            if ((!incisoCheck.isSelected()) && (!principalCheck.isSelected()) && (!parcialCheck.isSelected())) {
                exportarBtn.setEnabled(false);
            }
            incisoCheck.setEnabled(true);
            principalCheck.setEnabled(true);
            parcialCheck.setEnabled(true);

        }
    }//GEN-LAST:event_subParcialCheckActionPerformed

    private void HastaTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HastaTextFieldKeyTyped
        // TODO add your handling code here:
        char teclaPulsada = evt.getKeyChar(); // Recogemos, a partir del evento, la tecla que se puls√≥

        if (!Character.isDigit(teclaPulsada)) { // Si la tecla pulsada no es un d√≠gito, entonces...
            evt.consume(); // Borramos la √∫ltima letra introducida (lo hace muy r√°pido, la
            // letra nunca se escribe en el textfield)
        }
    }//GEN-LAST:event_HastaTextFieldKeyTyped

    private void fuenteTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fuenteTextFieldKeyTyped
        // TODO add your handling code here:
        char teclaPulsada = evt.getKeyChar(); // Recogemos, a partir del evento, la tecla que se puls√≥

        if (!Character.isDigit(teclaPulsada)) { // Si la tecla pulsada no es un d√≠gito, entonces...
            evt.consume(); // Borramos la √∫ltima letra introducida (lo hace muy r√°pido, la
            // letra nunca se escribe en el textfield)
        }
    }//GEN-LAST:event_fuenteTextFieldKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JTextField DesdeTextField;
    javax.swing.JTextField HastaTextField;
    javax.swing.JCheckBox NegativoCheck;
    javax.swing.JCheckBox Partida151Check;
    javax.swing.JCheckBox agruparFFCheck;
    javax.swing.JCheckBox conGastosCheck;
    javax.swing.JButton exportarBtn;
    javax.swing.JTextField fuenteTextField;
    javax.swing.JCheckBox incisoCheck;
    javax.swing.JTable jTable1;
    javax.swing.JCheckBox parcialCheck;
    javax.swing.JCheckBox principalCheck;
    javax.swing.JCheckBox sinPartidaCheck;
    javax.swing.JCheckBox subParcialCheck;
    // End of variables declaration//GEN-END:variables
}


//distin grupo empresa y fecha
